plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'com.github.willir.rust.cargo-ndk-android'
}

android {
    namespace 'com.anvlkv.redsiren.core'
    compileSdk 34
    ndkVersion "26.1.10909125"

    defaultConfig {
        minSdk 31
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += "${projectDir}/../../typegen/generated/java"
        main.jniLibs.srcDirs += "src/main/jniLibs"
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    implementation "net.java.dev.jna:jna:5.13.0@aar"
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

apply plugin: 'com.github.willir.rust.cargo-ndk-android'

cargoNdk {
    targets = ["arm", "arm64", "x86", "x86_64"]
    buildType = "release"
    module = "../"
    librariesNames = ["libffirs.so"]
    extraCargoBuildArguments = ['--package', 'bindgen', '--lib', '--features', 'android']
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.configureEach { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"

        tasks.named("compile${buildType}Kotlin") {
            it.dependsOn(tasks.named("typesGen"), tasks.named("bindGen"))
        }

        tasks.named("compile${buildType}JavaWithJavac") {
            it.dependsOn(tasks.named("typesGen"), tasks.named("bindGen"), tasks.named("buildCargoNdk${buildType}"))
        }
    }
}


tasks.register('bindGen', Exec) {
    def outDir = "${projectDir}/../../typegen/generated/java"
    workingDir "../../"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine(
                "cmd", "/c",
                "cargo build -p bindgen && " +
                        "target\\debug\\bindgen generate --library target\\debug\\libffirs.so" +
                        "--language kotlin " +
                        "--out-dir " + outDir.replace('/', '\\')
        )
    } else {
        commandLine(
                "sh", "-c",
                """\
                cargo build -p bindgen && \
                target/debug/bindgen generate --library target/debug/libffirs.dylib \
                --language kotlin \
                --out-dir $outDir
                """
        )
    }
}

tasks.register('typesGen', Exec) {
    workingDir "../../"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine("cmd", "/c", "cargo build -p typegen")
    } else {
        commandLine("sh", "-c", "cargo build -p typegen")
    }
}
